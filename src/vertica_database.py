import vertica_python
import time


class VerticaDatabase(object):
    def __init__(self, host, user, database, password, port=5433):
        conn_info = {
            'host': host,
            'port': port,
            'user': user,
            'database': database,
            'password': password,
            # autogenerated session label by default,
            'session_label': 'some_label',
            # 10 minutes timeout on queries
            'read_timeout': 6000,
            # default throw error on invalid UTF-8 results
            'unicode_error': 'strict',
            # SSL is disabled by default
            'ssl': False,
            # using server-side prepared statements is disabled by default
            'use_prepared_statements': False,
            # connection timeout is not enabled by default
            'connection_timeout': 50
        }
        self.connection = vertica_python.connect(**conn_info)

    def close(self):
        self.connection.close();

    def getRelatedNode(self, keywords):
        # with self.connection as connection:
        cur = self.connection.cursor('dict')
        cur.execute("SELECT *"
                    "FROM vertex "
                    "WHERE ("
                    # "REGEXP_LILE(NODE_ID,'.*\\bchina\\b.*' ,'i') | "
                    "REGEXP_LIKE(NODE_LABEL, :keyword ,'i') or "
                    "REGEXP_LIKE(TYPE, :keyword ,'i') or "
                    "REGEXP_LIKE(FIRST_NAME, :keyword ,'i') or "
                    "REGEXP_LIKE(LAST_NAME, :keyword ,'i') or "
                    "REGEXP_LIKE(GENDER, :keyword ,'i') or "
                    "REGEXP_LIKE(EMAIL, :keyword ,'i') or "
                    "REGEXP_LIKE(SPEAKS, :keyword ,'i') or "
                    "REGEXP_LIKE(BROWSER_USED, :keyword ,'i') or "
                    "REGEXP_LIKE(LOCATION_IP, :keyword ,'i') or "
                    "REGEXP_LIKE(NAME, :keyword ,'i') or "
                    "REGEXP_LIKE(CONTENT, :keyword ,'i') or "
                    # "REGEXP_LILE(ID,'.*\\bchina\\b.*' ,'i') | "
                    "REGEXP_LIKE(LANGUAGE, :keyword ,'i') or "
                    "REGEXP_LIKE(IMAGE_FILE, :keyword ,'i') or "
                    "REGEXP_LIKE(TITLE, :keyword ,'i') or "
                    "REGEXP_LIKE(URL, :keyword ,'i')"
                    ");", {'keyword': ".*\\b" + str.strip(keywords) + "\\b.*"})
        result = cur.fetchall()
        return result

    def getNeighbourhood(self, ck):
        cur = self.connection.cursor('dict')
        cur.execute(
            "SELECT "
            "FIRSTEDGE.NODE_ID,"
            "HAS_CREATOR_ID,"
            "IS_LOCATED_IN_ID,"
            "REPLY_OF_ID,"
            "CONTAINER_OF_ID,"
            "HAS_MEMBER_ID,"
            "HAS_MODERATOR_ID,"
            "HAS_TAG_ID,"
            "HAS_INTEREST_ID,"
            "KNOWS_ID,"
            "LIKES_ID,"
            "IS_PART_OF_ID,"
            "IS_SUBCLASS_OF_ID,"
            "HAS_TYPE_ID,"
            "STUDY_AT_ID,"
            "WORK_AT_ID "
            "FROM "
            "firstedge,VERTEX "
            "WHERE "
            "firstedge.NODE_ID = :CK "
            "AND VERTEX.NODE_ID = firstedge.NODE_ID;", {'CK': int(ck)}
        )
        result = cur.fetchall();
        return result

    def getNodeTime(self, keywords):
        total_time = 0.0
        start = time.time()
        result = self.getRelatedNode(keywords=keywords)
        # print(result.__len__())
        total_time = time.time() - start
        return total_time
